React
오로지 뷰(view)에 집중해 개발하는 라이브러리
리액트는 SPA(Single Page Application)방식에서 많이 사용되는 자바스크립트 라이브러리이며 사용자 인터페이스를 만들기 위해
사용되는 라이브러리이다.
기업에서 흔하게 사용되는 프레임워크는 MVC(Model-View-Controller) 아키텍처 기반 프레임워크이다. 
MVC방식은 데이터가 변경될 때마다 컨트롤러/모델에서 데이터를 변경하고, 변경된 사항을 뷰에 렌더링하여 화면에 보여준다.
이러한 방식은 처리해야 할 이벤트가 많거나 서버로직이 복잡할 경우 사용자에게 변경된 부분을 보여주는데 
많은 시간이 소요된다.
이를 해결하기 위해 페이스북은 오직 뷰에 집중한 라이브러리 리액트를 개발했다.

컴포넌트(Component) 단위로 화면이 구성
리액트에서 사용자가 보는 화면은 여러가지 컴포넌트로 구성되어 있으며, 앱을 이루는 최소한 단위는 컴포넌트이다.
컴포넌트는 사용자에게 보여지는 UI 요소를 컴포넌트 단위로 구분하여 구현이 가능하다.

리액트 렌더링

클라이언트 사이드 렌더링(CSR : Client Side Rendering)
어떤 페이지를 사용자에게 보여주려면 렌더링이 필요하다. 리액트는 클라이언트가 HTML을 그리는 클라이언트 사이드 렌더링(CSR)
방식을 사용한다. CSR방식은 초기에 HTML, CSS, Script를 모두 불러온 이후에 사용자의 행동에 따라 필요한 부분만 불러오는 방식이다.
필요한 부분만 불러오기 때문에 전체를 다시 불러오는 서버 사이드 렌더링(SSR : Server Side Rendering) 방식보다 리렌더링 시간이 훨씬
빠르다.

초기 렌더링, 리렌더링
리액트에서는 렌더링을 두 단계로 나누어 실행을 한다.
가장 처음 실행되는 '초기 렌더링' 단계, 이후 데이터가 변경될 경우 실행되는 '리렌더링' 단계가 있다.
초기 렌더링이 발생한 이후에 데이터가 변경이 되면 변경된 부분의 새로운 컴포넌트로 갈아끼우는 Reconciliation(재조정) 방식을 사용한다.

Virtual Dom (가상 돔)
DOM의 비효율성
DOM 트리가 변경될 때마다 트리 전체를 다시 구성하고 페이지를 다시 그리게 된다면 업데이트가 잦은 시스템은 페이지 로딩이
많이 느려진다. Virtual DOM은 페이지를 다시 그리는 것이 아닌 변경된 부부만 반영되는 DOM이기 때문에 지속적인 업데이트가 일어나는
대규모 어플리케이션을 개발하는데 적합하다.











JSX
const element = <h1>Hello, world!</h1>;
JacaScript에 XML을 추가하여 확장한 문법입니다.
리액트로 프로젝트를 개발할 때 사용되며 공식적인 JacaScript 문법은 아니다.
브라우저에서 실행하기 전에 바벨을 사용하여 일반 스크립트 형태의 코드로 변환된다.
하나의 파일에 JacaScript 와 HTML을 동시에 작성하여 편리하고 가독성이 높다

JSX 문법
두가지 이상의 요소에는 반드시 부모 요소 하나가 감싸는 형태여야 한다.
Virtual DOM에서 컴포넌트 변화를 감지할 때 효율적으로 비교할 수 있도록 컴포넌트 내부는 하나의 
DOM트리 구조로 이루어져야 한다는 규칙이 있기 때문이다.

fail
function App() {
	return (
		<div>Hello</div>
		<div>World!</div>
	);
}

good
function App() {
	return (
		<div>
			<div>Hello</div>
			<div>World!</div>
		</div>
	);
}

function App() {
	return (
		<>
			<div>Hello</div>
			<div>World!</div>
		</>
	);
}

JavaScript 표현식
JSX 안에서도 자바스크립트 변수를 사용할 수 있다. 자바스크립트 표현식을 작성하려면 JSX 내부에서
코드를 {}로 감싸주면 된다.

if, for 문 대신 삼항 연산자(조건부 연산자) 사용
if 구문과 for 루프는 JavaScript 표현식이 아니기 때문에 JSX 내부 자바스크립트 표현식에서는
사용할 수 없다.
그렇기 때문에 조건부에 따른 렌더링 시 JSX 함수의 return 바깥에서 if문을 사용하거나, {}안에서 삼항 연산자(조건부 연산자)를
사용한다.

function App() {
	let desc = '';
	const loginYn = 'Y';
	if(loginYn === 'Y') {
		desc = <div>AirJun 입니다.</div>;
	} else {
		desc = <div>비회원 입니다.</div>;
	}
	return (
		<>
			{desc}
		</>
	);
}


useState

컴포넌트에서 동적인 값을 상태(state)라고 부른다. react에 useState라는 함수가 있는데 이것을 사용하면 컴포넌트에서
상태를 관리를 할 수 있다

import React, { useState } from 'react';
react 패키지에서 ustState 함수를 호출하는 코디이다.
useState라고 타이핑만 쳐도 자동완성 코드가 나온다.

const [number, setNumber] = useState(0);

useState를 사용할 때에는 상태의 기본값을 파라미터로 넣어서 호출한다. 함수를 호출하면 배열이 반환이 되는데
호출시 배열 안에 들어간 첫 번째는 현재상태를 두 번째는 Setter 함수이다.
Setter함수는 파라미터로 전달받은 값을 최신 상태로 설정을 해준다.

    <>
      <h1>{number}</h1>
      <button onClick={() => setNumber(c=>c+1)}>increase</button>
      <button onClick={() => setNumber(c=>c-1)}>decrease</button>
    </>

Component
리액트로 만들어진 앱은 화면에서 UI요소를 구분할 때 이루는 최소한의 단위
예를 들어 레고 블록으로 집을 쌓게 된 경우 리액트에서 앱을 이루는 컴포넌트를 하나의 레고 블록이라고 할 수 있다.
기존의 웹 프레임워크는 MVC방식으로 분리해 관리하여 각 요소의 의존성이 높아 재활용이 어렵다는 단점이 있었다. 
반면 컴포넌트는 MVC의 뷰를 독립적으로 구성하여 재사용을 할 수 있고, 이를 통해 새로운 컴포넌트를 쉽게 만들 수 있다.
리액트의 중요한 핵심인 컴포넌트에는 2가지가 있으며 함수 컴포넌트와, 클랙스 컴포넌트가 있다.

컴포넌트 구성 요소
property(props)
부모 컴포넌트에서 자식 컴포넌트에 전달되는 데이터이다. 프로퍼티 값은 자식 컴포넌트에서 수정할 수 없다.

state
컴포넌트의 상태를 저장하고 수정 가능한 데이터이다.

context
부모 컴포넌트에서 생성하여 모든 자식 컴포넌트에 전달하는 데이터이다.

함수(Function) 컴포넌트 rsf
함수형 컴포넌트는 말 그대로 자바스크립트의 함수(function) 기반 컴포넌트이다. 자바스크립트 함수를 선언하듯이
function으로 컴포넌트를 정의하고, return 문에 JSX 코드를 반환한다.

화살표 함수 방식으로도 나타낼 수 있다. rsc

함수 컴포넌트를 사용하는 이유
Hooks
react 16.8 이전 버전에서는 함수형 컴포넌트에서 상태를 관리할 수 없어서 클래스형 컴포넌트를 많이 사용하였지만 
react 16.8 버전에서 Hooks라는 기능이 도입되어 함수형 컴포넌트에서도 상태를 관리를 할 수 있게 되어 함수형 컴포넌트 사용을 권장한다.
Hooks의 useState를 사용해 state 관리를 할 수 있고 useEffect를 사용하여 LifeCycle(생명주기)을 관리할 수 있다.

직관적인 코드
자바스크립트의 함수선언, 화살표 함수를 그대로 사용해 컴포넌트를 사용 가능하기 때문에 개발자에 직관적이다.

메모리 자원 효율
클래스형 컴포넌트에 비해 함수형 컴포넌트가 비교적 메모리 자원을 적게 사용한다.

클래스 컴포넌트
클래스 컴포넌트는 자바스크립트의 클래스 기반 컴포넌트로 class로 정의하고 render() 함수에서 JSX코드를 return 한다.

클래스 컴포넌트 특징
class 키워드로 클래스 컴포넌트 생성
React의 ComponentClass를 상속받아 Component 상속이 필요하다.

render() 메서드 필수로 사용
클래스 컴포넌트 안에 render() 메서드가 꼭 필요하고 메서드 안에 JSX를 리턴한다.

this키워드 사용하기
state, props, refs, 컴포넌트 메서드, 생명주기 메서드를 사용할 때 this로 프로퍼티를 참조하여 사용한다.



































































































