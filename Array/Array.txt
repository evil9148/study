Array
배열은 값을 순차적으로 저장하는 용도로 사용한다.
내부에는 어떠한 데이터 타입도 제약없이 값으로 사용할 수 있다.
배열 선언 방식은 2가지가 있다.
let arr = new Array(3).fill('')
let arr = ['','','']

new Array() : 배열을 생성한다는 뜻이며 () 안에 숫자를 입력하면 입력한 숫자 만큼의 빈요소를 가진 배열을 생성한다.
fill() : 배열 선언식 뒤에 .fill()을 입력하면 배열 내 요소의 값을 설정할 수 있다. 

배열의 순서는 첫번째 요소부터 0으로 시작한다.
let arr = [1,2,3]
배열의 요소를 확인하는 방법
arr[0] === 1
arr[2] === 3

배열의 길이를 확인하는 방법
arr.length === 3

배열의 요소에 새로운 값을 할당하기 위해서는 대입 연산자를 이용해 해당 배열의 요소에 새로운 값을
할당해 주는 방법이 있다.
let arr = [1,2,3]
arr[2] = 4 
[1,2,3] => [1,2,4] 
console.log(arr) === [1,2,4]

push
배열에 새로운 요소를 입력하는 방식이며 마지막 순서에 입력된다.
let arr = [1,2,3]
arr.push(4)
console.log(arr) === [1,2,3,4]

Spread Operator 스프레드 연산자
스프레드 연산자를 사용하면 배열, 문자열, 객체 등 반복 가능한 객체(Iterable Object)를 개별로
분리할 수 있다.
대표적으로 배열병합과 배열복사에 사용한다.
배열병합(Array Concatenation)
기존에 두 개의 배열을 결합하는데 있어서 concat 메서드를 사용했었으나, ES6에서는
spread연산자를 이용하여 좀 더 깔끔하게 배열 병합이 가능하다.

// 기존 방식
var arr1 = [1,2,3]; 
var arr2 = [4,5,6]; 

var arr = arr1.concat(arr2); 
console.log(arr); // [ 1, 2, 3, 4, 5, 6 ] 

// ES6 spread operator
var arr1 = [1,2,3]; 
var arr2 = [4,5,6]; 

var arr = [...arr1, ...arr2]; 
console.log(arr); // [ 1, 2, 3, 4, 5, 6 ] 

var arr1 = [1,2,3]; 
var arr2 = [4,5,6]; 
arr1.push(...arr2) 

console.log(arr1); // [1,2,3,4,5,6]


var arr1 = [1,2];
var arr2 = [0, ...arr1, 3, 4];

console.log(arr2); // [0, 1, 2, 3, 4]

배열복사 (Copying Arrays)




https://paperblock.tistory.com/62









